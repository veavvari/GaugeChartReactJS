{"version":3,"sources":["GaugeChart.js","App.js","GaugeChart2.js","index.js"],"names":["GaugeChart","drawArcs","arcObj","x","y","radius","startAngle","angle","color","arcWidth","i","arc_i","refs","myCanvas","getContext","lineWidth","beginPath","restore","globalAlpha","strokeStyle","arc","stroke","rectdivisions","rectObj","width","height","degrees","upperLimit","lowerLimit","numOfDivisions","text_x","text_y","Math","cos","PI","sin","rect_i","save","translate","rotate","rect","fill","unitDiv","midVal","parseFloat","round","divisionVal","console","log","textAlign","font","fillText","pointer","ptrObj","arcAng","actualValue","targetValue","title","subTitle","ptr","fillStyle","value","ptrAng","ptrX","ptrY","moveTo","ptr_X","ptr_Y","lineTo","actAng","strokeWidth","strokeColor","ang","props","dataSource","chart","actualValues","targetValues","colors","colorrange","division","code","this","updateCanvas","id","ref","style","border","position","React","Component","numbersuffix","tooltext","displayvalue","thickness","usemarker","markerbordercolor","markertooltext","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67ce5f4b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./GaugeChart.css\";\r\n\r\nexport default class GaugeChart extends React.Component{\r\n\r\n    drawArcs = (arcObj) => {\r\n        let {x, y, radius, startAngle, angle, color, arcWidth, i} = arcObj;\r\n        let arc_i = this.refs.myCanvas.getContext('2d');   \r\n       // arc_i.clearRect(0, 0, 600, 300);      \r\n        arc_i.lineWidth = arcWidth;\r\n        arc_i.beginPath();\r\n       \r\n        if(i===10){\r\n            arc_i.restore();\r\n            arc_i.globalAlpha = 0.1;\r\n        }\r\n            \r\n        arc_i.strokeStyle = color;\r\n        arc_i.arc(x, y, radius, startAngle, angle);\r\n        arc_i.stroke();\r\n    };\r\n    \r\n    rectdivisions = (rectObj) =>{\r\n        let {i, x, y, width, height, degrees, arcWidth, radius, upperLimit, lowerLimit, numOfDivisions}= rectObj;\r\n        let text_x = x ;\r\n        let text_y = y;\r\n        degrees = degrees*i;\r\n        y = y - height;\r\n        if(degrees === \"90\"){\r\n            y = y - radius - arcWidth/2;\r\n            text_y = text_y - radius - arcWidth/2;    \r\n        }    \r\n        else{\r\n            x= x - ((radius + arcWidth/2)*(Math.cos(degrees * Math.PI / 180)));\r\n            y= y - ((radius + arcWidth/2)*(Math.sin(degrees * Math.PI / 180)));\r\n            text_x = text_x - ((radius + arcWidth*6/8)*(Math.cos(degrees * Math.PI / 180)));\r\n            text_y = text_y - ((radius + arcWidth*6/8)*(Math.sin(degrees * Math.PI / 180)));\r\n        }  \r\n        let rect_i = this.refs.myCanvas.getContext('2d');\r\n        rect_i.save();\r\n        rect_i.beginPath();\r\n        rect_i.translate(x, y);\r\n        rect_i.rotate(degrees * Math.PI / 180);\r\n        rect_i.rect(-width/1000 , -height/4, width, height);\r\n        rect_i.fill();\r\n        rect_i.restore();\r\n        var unitDiv = (upperLimit - lowerLimit)/numOfDivisions;\r\n        var midVal = (parseFloat(lowerLimit) + parseFloat(upperLimit))/2;\r\n        //console.log(midVal);\r\n        unitDiv = Math.round(unitDiv*100)/100;\r\n        var divisionVal = parseFloat(lowerLimit) + i* (unitDiv);\r\n        divisionVal = Math.round(divisionVal*100)/100\r\n        console.log(i * unitDiv);\r\n        if( i === numOfDivisions)\r\n            divisionVal = upperLimit;\r\n        else if(i === numOfDivisions/2 && numOfDivisions%2 === 0)\r\n            divisionVal = midVal;\r\n\r\n        if(divisionVal < midVal)\r\n            rect_i.textAlign = \"right\"\r\n        else if(divisionVal > midVal) \r\n            rect_i.textAlign = \"left\"\r\n        else{ \r\n            rect_i.textAlign = \"center\"  \r\n        }\r\n       \r\n        rect_i.font = \"14px Source Sans Pro\";\r\n        rect_i.fillText(divisionVal, text_x, text_y);\r\n    }\r\n\r\n    pointer = (ptrObj) =>{\r\n        let {x, y, arcAng, radius, actualValue, lowerLimit, upperLimit, numOfDivisions, targetValue, arcWidth, title, subTitle}= ptrObj;\r\n        let ptr = this.refs.myCanvas.getContext('2d');\r\n        ptr.lineWidth = 1;\r\n        ptr.beginPath();\r\n        ptr.font = \"23px Source Sans Pro\";\r\n        ptr.textAlign = \"center\";\r\n        ptr.fillText(title, x, 25);\r\n        ptr.save();\r\n        ptr.font = \"14px Source Sans Pro\";\r\n        ptr.textAlign = \"center\";\r\n        ptr.fillStyle = \"rgb(153, 153, 153)\";\r\n        ptr.fillText(subTitle, x, 43);\r\n        ptr.save();\r\n        ptr.fillStyle = \"black\";\r\n        ptr.arc(x, y, 4, 0, 2*Math.PI);\r\n        ptr.fill();\r\n        ptr.stroke();\r\n\r\n        let unitDiv = (upperLimit - lowerLimit)/numOfDivisions\r\n        //console.log(unitDiv);\r\n        unitDiv = Math.round(unitDiv*100)/100;\r\n        //console.log(unitDiv);\r\n        let midVal = (parseFloat(lowerLimit) + parseFloat(upperLimit))/2;\r\n\r\n        if(actualValue[0].value)\r\n        {\r\n            let actualVal = parseFloat(actualValue[0].value) - midVal;            \r\n            let ptrAng = (actualVal * arcAng/unitDiv)*(Math.PI/180);\r\n            let ptrX = x + radius*(Math.sin(ptrAng));\r\n            let ptrY = y - radius*(Math.cos(ptrAng));\r\n            ptr.beginPath();            \r\n            ptr.moveTo(ptrX,ptrY);\r\n            let ptr_X = 2.5 * Math.cos(ptrAng);\r\n            let ptr_Y = 2.5 * Math.sin(ptrAng);\r\n            ptr.lineTo(x - ptr_X , y - ptr_Y);\r\n            ptr.lineTo(x + ptr_X , y + ptr_Y);\r\n            ptr.fill();\r\n            ptr.textAlign = \"center\";\r\n            ptr.fillText(actualValue[0].value, x, y + 20);\r\n            ptr.fillText(\"Actual Value\", x, y + 35);\r\n                        \r\n        }\r\n        \r\n        if(targetValue[0].value){\r\n            //let ptr1 = this.refs.myCanvas.getContext('2d');\r\n            let targetVal = parseFloat(targetValue[0].value) - midVal;            \r\n            let actAng = (targetVal * arcAng/unitDiv)*(Math.PI/180);\r\n            let ptrX = x + (radius + arcWidth/3 ) * (Math.sin(actAng));\r\n            let ptrY = y - (radius + arcWidth/3 ) * (Math.cos(actAng));\r\n            let text_X = x + (radius + arcWidth *7/8)*(Math.sin(actAng));\r\n            let text_Y = y - (radius + arcWidth *7/8)*(Math.cos(actAng));\r\n            // ptr1.rect(ptrX, ptrY, arcWidth, 5);\r\n            // ptr1.fillStyle = \"black\";\r\n            // ptr1.fill();\r\n            // ptr1.restore();\r\n            //console.log(ptrY);\r\n            // ptr.save();\r\n            // ptr.beginPath();\r\n             ptr.textAlign = \"start\"; \r\n             \r\n             ptr.fillStyle= 'red';\r\n             //ptr.fillText(\"Target Value\" , text_X, text_Y);\r\n            // ptr.translate(ptrX , ptrY);\r\n            // ptr.rotate(-actAng);\r\n            // //ptr.rect( -arcWidth/2 , 0, arcWidth/2, 2);\r\n            // ptr.fillStyle = \"black\";\r\n            // ptr.fill();\r\n            // ptr.restore();\r\n\r\n\r\n            ptr.save();\r\n            ptr.beginPath();\r\n            let tri_X = x + (radius + (arcWidth)/4) * (Math.sin(actAng));\r\n            let tri_Y = y - (radius + (arcWidth)/4) * (Math.cos(actAng));\r\n            let tri_a = x + (radius + arcWidth*5/8) * (Math.sin(actAng));\r\n            let tri_b = y - (radius + arcWidth*5/8) * (Math.cos(actAng));            \r\n            //ptr.moveTo(tri_X,tri_Y);\r\n            let ptr_X = 4 * Math.cos(actAng);\r\n            let ptr_Y = 4 * Math.sin(actAng);\r\n            //ptr.lineTo(tri_a - 2*ptr_X , tri_b - 2*ptr_Y);\r\n            //ptr.lineTo(tri_a + 2*ptr_X , tri_b + 2*ptr_Y);\r\n            ptr.fillStyle = \"red\";\r\n            ptr.fill();\r\n\r\n            ptr.save();\r\n            ptr.beginPath();\r\n\r\n            let tri_XX = x + (radius - (arcWidth )/2) * (Math.sin(actAng));\r\n            let tri_YY = y - (radius - (arcWidth )/2) * (Math.cos(actAng));\r\n            //ptr.rect( , 0, arcWidth/2, 2);\r\n            //let ax = \r\n            //ptr.moveTo(tri_XX, tri_YY);\r\n            //ptr.lineTo(tri_a  , tri_b);\r\n            // ptr.lineTo(tri_a + ptr_X , tri_b + ptr_Y);\r\n            ptr.strokeWidth = 10;\r\n            ptr.strokeColor = \"red\";\r\n            //ptr.stroke();\r\n\r\n            ptr.save();\r\n            ptr.beginPath();\r\n            ptr.fillStyle = \"#F2726F\";\r\n            // ptr.rect(150,327, 60, 13);\r\n            // ptr.fillText('Poor',215,338);\r\n            ptr.fill();\r\n            ptr.save();\r\n            ptr.beginPath();\r\n            ptr.fillStyle = \"#FFC533\";\r\n            // ptr.rect(250,327, 60, 13);\r\n            // ptr.fillText('Average',315,338);\r\n            ptr.fill();\r\n            ptr.save();\r\n            ptr.beginPath();\r\n            ptr.fillStyle = \"#62B58F\";\r\n            // ptr.rect(370,327, 60, 13);\r\n            // ptr.fillText('Good',435,338);\r\n            ptr.fill();\r\n            ptr.save();\r\n            ptr.beginPath();    \r\n            ptr.strokeStyle = '#002A86';\r\n            let ang = Math.PI + Math.PI*(135/180);\r\n            let angle = Math.PI + Math.PI*(165/180);\r\n            ptr.arc(300, 250, radius-30, ang, angle);\r\n            ptr.lineWidth=10;\r\n           // ptr.globalAlpha = 0.8;\r\n            ptr.stroke();\r\n            ptr.save();\r\n            ptr.beginPath(); \r\n            ptr.arc(300, 250, radius+44, ang, angle);\r\n            ptr.lineWidth=40;\r\n            ptr.stroke();\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    updateCanvas(props){\r\n        var {numOfDivisions, lowerLimit, upperLimit, title, subTitle} = props.dataSource.chart;\r\n        const actualValue = props.dataSource.actualValues.actualValue;\r\n        const targetValue = props.dataSource.targetValues.targetValue;\r\n        //let midVal = (lowerLimit+upperLimit)/2;\r\n        //console.log(midVal);\r\n\r\n        \r\n        if(!numOfDivisions)\r\n            numOfDivisions = 5;\r\n        let arcAng = 180/numOfDivisions;\r\n        let x = 300;\r\n        let y = 250;\r\n        let radius = 130;\r\n        let startAngle = Math.PI;\r\n        let angle = Math.PI+ Math.PI*(arcAng/180);\r\n        let rect_width = 10;\r\n        let rect_height = 1;\r\n        let arcWidth = 50;\r\n        var colors = props.dataSource.colorrange.color;\r\n        for(let i = 0; i <= numOfDivisions; i++){\r\n            let color = \"red\";\r\n            if(i !== 0 ){\r\n                startAngle = angle;\r\n                angle = Math.PI + Math.PI*((arcAng*(i+1))/180);                  \r\n            }\r\n            if(i !== numOfDivisions){   \r\n                if(colors[i].division===i+1)\r\n                    color = colors[i].code;     \r\n                let arcObj = {\"i\":i, \"x\":x, \"y\":y, \"radius\": radius, \"startAngle\":startAngle, \"angle\":angle, \"color\":color, \"arcWidth\": arcWidth};\r\n                //major arcs      \r\n                this.drawArcs(arcObj);\r\n            }    \r\n            //divisions\r\n            let rectObj = {\"i\": i, \"x\":x, \"y\":y, \"width\":rect_width, \"height\":rect_height, \"degrees\": arcAng, \"arcWidth\":arcWidth, \"radius\": radius, \"numOfDivisions\":numOfDivisions, \"lowerLimit\":lowerLimit, \"upperLimit\":upperLimit};\r\n            this.rectdivisions(rectObj);  \r\n                          \r\n        }\r\n\r\n        //pointer\r\n        let ptrObj = {\"x\":x, \"y\":y, \"radius\":radius, \"arcAng\":arcAng, \"lowerLimit\":lowerLimit, \"upperLimit\":upperLimit, \"actualValue\":actualValue, \"numOfDivisions\":numOfDivisions, \"targetValue\" : targetValue, \"arcWidth\":arcWidth, \"title\":title, \"subTitle\":subTitle}\r\n        this.pointer(ptrObj);\r\n\r\n    }\r\n    componentDidMount() {        \r\n        this.updateCanvas(this.props);\r\n    }\r\n    // handleMouseMove = (event) =>{\r\n    //    // alert(event.offsetX);\r\n    //     let y = event.offsetY;\r\n    //     let x = event.offsetX;\r\n    //     //console.log(y +'---'+x);\r\n    //     let angleRad = Math.atan((y - 265)/(x - 300));\r\n    //     let angleDeg = angleRad * 180 / Math.PI;\r\n    //     let arcAng = 60;\r\n    //     let rad = Math.pow(x-300, 2) + Math.pow(y - 265, 2);\r\n    //     rad = Math.sqrt(rad);\r\n    //     //console.log(rad);\r\n    //     if(angleDeg < 0)\r\n    //     angleDeg = 180 + angleDeg;\r\n    //     var i =1;\r\n    //     for( i =1 ; i <= 3; i++ ){\r\n            \r\n    //         if((angleDeg/(i*arcAng)) <= 1 && ( rad < 155) && (105 < rad ) && y <= 265){\r\n    //             console.log(i);\r\n    //             break;\r\n    //         }else{\r\n    //             let arcObj = {\"i\":1, \"x\":300, \"y\":265, \"radius\": 130, \"startAngle\":Math.PI, \"angle\":Math.PI+ Math.PI*(60/180), \"color\":\"#F2726F\", \"arcWidth\": 50};\r\n    //             //major arcs      \r\n    //             this.drawArcs(arcObj);\r\n    //         }\r\n    //         //console.log('vimusha ' + i)\r\n\r\n    //     }\r\n    //     if(i !== 4){\r\n    //         let arcObj = {\"i\":10, \"x\":300, \"y\":265, \"radius\": 130, \"startAngle\":Math.PI, \"angle\":Math.PI+ Math.PI*(60/180), \"color\":\"#F2726F\", \"arcWidth\": 70};\r\n    //             //major arcs      \r\n    //             this.drawArcs(arcObj);\r\n    //         console.log('vimusha ' + i)\r\n    //     }else{\r\n    //         let arcObj = {\"i\":1, \"x\":300, \"y\":265, \"radius\": 130, \"startAngle\":Math.PI, \"angle\":Math.PI+ Math.PI*(60/180), \"color\":\"#F2726F\", \"arcWidth\": 50};\r\n    //         //major arcs      \r\n    //         this.drawArcs(arcObj);\r\n    //     }\r\n            \r\n            \r\n    // }\r\n    // // handleMouse = (event) =>{\r\n    // //     let arcObj = {\"i\":10, \"x\":300, \"y\":265, \"radius\": 130, \"startAngle\":Math.PI, \"angle\":Math.PI+ Math.PI*(60/180), \"color\":\"#F2726F\", \"arcWidth\": 50};\r\n    // //     //major arcs      \r\n    // //     this.drawArcs(arcObj);\r\n    // // }\r\n\r\n    render(){        \r\n        return(\r\n          <div id=\"my\">\r\n              <canvas ref=\"myCanvas\" width={600} height={350} style={{border:\"1px solid #d3d3d3\" ,position:\"absolute\" }}\r\n            //   onMouseMove={\r\n            //     e => {\r\n            //         let nativeEvent = e.nativeEvent;\r\n            //         this.handleMouseMove(nativeEvent);\r\n            //     }}\r\n            //     onMouseDown={\r\n            //         e => {\r\n            //             let nativeEvent = e.nativeEvent;\r\n            //             this.handleMouse(nativeEvent);\r\n            //         }}\r\n            //         onMouseUp={\r\n            //             e => {\r\n            //                 let nativeEvent = e.nativeEvent;\r\n            //                 this.handleMouse(nativeEvent);\r\n            //             }} \r\n                        >Your browser does not support the HTML5 canvas tag.</canvas>\r\n          </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport GaugeChart from \"./GaugeChart\";\r\nimport GaugeChart2 from \"./GaugeChart2\";\r\nimport GaugeChart3 from \"./GaugeChart3\";\r\n\r\n\r\nconst dataSource = {\r\n  chart: {\r\n    title: \"My Sample Gauge Chart\",\r\n    subTitle: \"2020\",\r\n    lowerLimit: \"0\",\r\n    upperLimit: \"3\",\r\n    numOfDivisions: 3,\r\n    numbersuffix: \"\",\r\n  },\r\n  colorrange: {\r\n    color: [\r\n      {\r\n        division: 1,\r\n        code: \"#844CAB\"\r\n      },\r\n      {\r\n        division: 2,\r\n        code: \"#FA6775\"\r\n      },\r\n      {\r\n        division: 3,\r\n        code: \"#619B87\"\r\n      },\r\n      {\r\n        division: 4,\r\n        code: \"#783EA9\"\r\n      },\r\n      {\r\n        division: 5,\r\n        code: \"#E28182\"\r\n      },\r\n      {\r\n        division: 6,\r\n        code: \"#62B58F\"\r\n      },\r\n    ]\r\n  },\r\n  actualValues: {\r\n    actualValue: [\r\n      {\r\n        value: \"2.5\",\r\n        tooltext: \"<b>9%</b> lesser that target\"\r\n      }\r\n    ]\r\n  },\r\n  targetValues: {\r\n    targetValue: [\r\n      {\r\n        value: \"2.7\",\r\n        displayvalue: \"Target\",\r\n        thickness: \"2\",\r\n        color: \"#E15A26\",\r\n        usemarker: \"1\",\r\n        markerbordercolor: \"#E15A26\",\r\n        markertooltext: \"80%\"\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\nconst dataSource2 = {\r\n  chart: {\r\n    title: \"Walmart's Customer Satisfaction Score\",\r\n    subtitle: \"2017\",\r\n    lowerlimit: \"0\",\r\n    upperlimit: \"100\",\r\n    numofdivisions: \"1\",\r\n    numbersuffix: \"%\",\r\n    },\r\n  colorrange: {\r\n    color: [\r\n      {\r\n        minvalue: \"50\",\r\n        maxvalue: \"75\",\r\n        code: \"#F2726F\"\r\n      },\r\n      {\r\n        minvalue: \"0\",\r\n        maxvalue: \"50\",\r\n        code: \"#FFC533\"\r\n      },\r\n      {\r\n        minvalue: \"74\",\r\n        maxvalue: \"100\",\r\n        code: \"#62B58F\"\r\n      }\r\n    ]\r\n  },\r\n  actualValues: {\r\n    actualValue: [\r\n      {\r\n        value: \"71\",\r\n        tooltext: \"<b>9%</b> lesser that target\"\r\n      }\r\n    ]\r\n  },\r\n  targetValues: {\r\n    targetValue: [\r\n      {\r\n        value: \"80\",\r\n        displayvalue: \"Target\",\r\n        thickness: \"2\",\r\n        color: \"#E15A26\",\r\n        usemarker: \"1\",\r\n        markerbordercolor: \"#E15A26\",\r\n        markertooltext: \"80%\"\r\n      }\r\n    ]\r\n  }\r\n};\r\nexport default class App extends React.Component{\r\n    componentDidMount() {\r\n        this.updateCanvas();\r\n    }\r\n    updateCanvas() {\r\n//        const ctX = this.refs.canvas.getContext('2d');\r\n//        ctX.fillRect(0,0, 100, 100);\r\n//        var c = document.getElementById(\"myCanvas\");\r\n//         var ctx = this.refs.myCanvas.getContext('2d');\r\n//         ctx.beginPath();\r\n//         var rad = Math.PI+ Math.PI*(36/180)\r\n//         var rad2=rad+Math.PI*(36/180);\r\n//         var rad3=rad2+Math.PI*(36/180);\r\n//         var rad4=rad3+Math.PI*(36/180);\r\n//         var rad5 = rad4 + Math.PI*(36/180);\r\n//         ctx.lineWidth = 40;\r\n//         ctx.strokeStyle = \"#FF0000\";\r\n//         ctx.arc(200,140,90,Math.PI,rad);\r\n       \r\n\r\n//         var ctx9 = this.refs.myCanvas.getContext('2d');\r\n\r\n//         ctx9.fillRect(200-110,138,10,2); // y = yval-1 ; x = 95-40- strokewidth/2\r\n//         var ctx11 = this.refs.myCanvas.getContext('2d');\r\n//         var x = 200-(110*(Math.cos(36 * Math.PI / 180))); \r\n//        // var y = 140-(55*(Math.cos(30 * Math.PI / 180)));\r\n//        var y = 140 -(110*(Math.sin(36 * Math.PI / 180)));\r\n//        //ctx11.rotate(30 * (Math.PI / 180));\r\n//         //ctx11.rotate(30 * Math.PI / 180);\r\n//         ctx11.fillRect(x,y,10,2);\r\n//         var x_text = 200-(125*(Math.cos(36 * Math.PI / 180))); \r\n//         var y_text = 140 -(125*(Math.sin(36 * Math.PI / 180)));\r\n//         ctx11.fillText(\"0\", x_text, y_text);\r\n//         //if angle is 90 deg\r\n//         var ctx12 = this.refs.myCanvas.getContext('2d');\r\n//         var x1 = 200; \r\n//         var y1 = 140 - 90 -20;\r\n       \r\n//         ctx12.fillRect(x1+5,y1+5,2,10);\r\n//         ctx12.fillText(\"1\", x1, y1-10);\r\n//         //95-40*cosine(ANGLE)\r\n//         //50-50*siNE(ANGLE) \r\n//         //more than 90\r\n//         var ctx13 = this.refs.myCanvas.getContext('2d');\r\n//         var x2= 200+(110*(Math.cos(36 * Math.PI / 180))) - 10; \r\n//         var y2 = 140-(110*(Math.sin(36 * Math.PI / 180)));\r\n//         ctx13.fillRect(x2,y2,10,2);\r\n//         var ctx14 = this.refs.myCanvas.getContext('2d');\r\n//         var x2_text = 200+(125*(Math.cos(36 * Math.PI / 180))); \r\n//         var y2_text = 140 -(125*(Math.sin(36 * Math.PI / 180)));\r\n//         ctx11.fillText(\"4\", x2_text, y2_text);\r\n//         ctx14.fillRect(200+110-10,138,10,2);\r\n//         //rotation..\r\n\r\n//         ctx.globalAlpha = 0.7; \r\n//         ctx.stroke();\r\n//         var ctx2 = this.refs.myCanvas.getContext('2d');\r\n//         ctx2.lineWidth = 40;\r\n//         ctx2.beginPath();\r\n//         ctx2.strokeStyle = \"green\";\r\n//         ctx2.arc(200,140,90,rad,rad2);\r\n\r\n//         ctx2.stroke();\r\n\r\n//         var ctx3 =this.refs.myCanvas.getContext('2d');\r\n//         ctx3.lineWidth = 40;\r\n//         ctx3.beginPath();\r\n//         ctx3.strokeStyle = \"blue\";\r\n//         ctx3.arc(200,140,90,rad2,rad3);\r\n\r\n//         ctx3.stroke();\r\n\r\n//         var ctx4 = this.refs.myCanvas.getContext('2d');\r\n//         ctx4.lineWidth = 40;\r\n//         ctx4.beginPath();\r\n//         ctx4.strokeStyle = \"orange\";\r\n//         ctx4.arc(200,140,90,rad3,rad4);\r\n\r\n\r\n//         ctx4.stroke();\r\n// //ctx142 for centre \r\n//         var ctx142 = this.refs.myCanvas.getContext('2d');\r\n//         ctx142.lineWidth = 1;\r\n//         ctx142.beginPath();\r\n//         ctx142.strokeStyle = \"black\";\r\n//         ctx142.arc(200,140,3,0, 2*Math.PI);\r\n\r\n//         ctx142.fill();\r\n//         ctx142.stroke();\r\n\r\n//         var ctx152 = this.refs.myCanvas.getContext('2d');\r\n//         ctx152.lineWidth = 40;\r\n//         ctx152.beginPath();\r\n//         ctx152.strokeStyle = \"violet\";\r\n//         ctx152.arc(200,140,90,rad4, rad5);     \r\n//         ctx152.stroke();\r\n\r\n//         var ptrCir = this.refs.myCanvas.getContext('2d');\r\n//         ptrCir.lineWidth = 1;\r\n//         ptrCir.beginPath();\r\n//         ptrCir.strokeStyle = \"dark red\";\r\n//         ptrCir.arc(200,140,4,0, 2*Math.PI);     \r\n//         ptrCir.stroke();\r\n\r\n//         var ptr = this.refs.myCanvas.getContext('2d');\r\n//         //greater that 90  take angle - 90 this is for 3.8\r\n//         var ptrAng = 1.3*(Math.PI/180)*36;\r\n//         let ptrX = 200 + 90*(Math.sin(-ptrAng));\r\n//         let ptrY = 140 - 90*(Math.cos(ptrAng));\r\n//         ptr.beginPath();\r\n//         //ptr.moveTo(200,140-90);\r\n        \r\n//         ptr.moveTo(ptrX,ptrY);\r\n//         ptr.lineTo(197, 140);\r\n//         ptr.lineTo(203, 140);\r\n//         ptr.fill();\r\n//         //ptr.lineWidth = 100;\r\n//         //ptr.rotate((Math.PI/180)*30);\r\n        \r\n\r\n//         ptr.fill();\r\n    }\r\n    \r\n  render(){\r\n      return(\r\n        \r\n        <div>\r\n            <GaugeChart dataSource={dataSource}></GaugeChart>\r\n            {/* <GaugeChart3 dataSource={dataSource2}></GaugeChart3> */}\r\n            {/* <canvas ref=\"myCanvas\" width={400} height={200} style={{border:\"1px solid #d3d3d3\" ,position:\"absolute\" }}/> */}\r\n            {/* <GaugeChart2 dataSource={dataSource2}></GaugeChart2> */}\r\n            {/* <canvas ref=\"myCanvas\" width={400} height={200} style={{border:\"1px solid #d3d3d3\" ,position:\"absolute\" }}/> */}\r\n        </div>\r\n      );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class GaugeChart extends React.Component{\r\n    gaugeArcs = (props) => {\r\n        console.log(parseFloat(\"60.5278\"));\r\n    }\r\n\r\n    updateCanvas(props){\r\n            //color arcs\r\n        this.gaugeArcs(props);\r\n    }\r\n    componentDidMount() {        \r\n        this.updateCanvas(this.props);\r\n    \r\n\r\n    }\r\n    render(){        \r\n        return(\r\n          <div>\r\n              <canvas ref=\"myCanvas\" width={400} height={200} style={{border:\"1px solid #d3d3d3\" ,position:\"absolute\" }}/>\r\n          </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}